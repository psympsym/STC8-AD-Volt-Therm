C51 COMPILER V9.60.0.0   STC8AX_UART                                                       06/08/2023 19:12:30 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE STC8AX_UART
OBJECT MODULE PLACED IN .\Objects\STC8Ax_UART.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE STC8Ax_LIB\src\STC8Ax_UART.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\User;.\Drive
                    -rs;.\STC8Ax_LIB\Core\Startup;.\STC8Ax_LIB\inc;.\STC8Ax_LIB\Core) DEBUG OBJECTEXTEND PRINT(.\Listings\STC8Ax_UART.lst) OB
                    -JECT(.\Objects\STC8Ax_UART.obj)

line level    source

   1          /*-------------------------------------------------------------------
   2          /*      (C) Copyright 2021-2022, nbufe. All Rights Reserved 
   3          /*-------------------------------------------------------------------
   4          /* File name   : STC8Ax_UART.c
   5          /* Description : STC8Ax 串口函数库
   6          /* Author      : nbufe
   7          /* Update date : 2021.12.15
   8          /*-------------------------------------------------------------------
   9          /* Update note:
  10          /* ---------   -----------   ----------------------------------------
  11          /*   Date        Author                       Note
  12          /* ---------   -----------   ----------------------------------------
  13          /*  
  14          /*
  15          **/
  16          
  17          /* 包含头文件 -------------------------------------------------------*/
  18          #include "STC8Ax_UART.h"
  19          
  20          /* 私有类型定义 -----------------------------------------------------*/
  21          /* None. */
  22          
  23          /* 私有宏定义 -------------------------------------------------------*/
  24          /* None. */
  25          
  26          /* 私有变量 ---------------------------------------------------------*/
  27          /* None. */
  28          
  29          /* 扩展变量 ---------------------------------------------------------*/
  30          /* 串口忙标志位，自定义，防止多串口冲突的变量 */
  31          uint8_t UartBusyFlg = 0; //Busy flag of receive
  32          
  33          /* 私有函数原形 -----------------------------------------------------*/
  34          /* None. */
  35          
  36          /* 函数体 -----------------------------------------------------------*/
  37          /**
  38           * 功能：串口1初始化函数
  39           * 参数：uartx  串口初始化结构体句柄，初始化时请定义该句柄，并将其地址传参。
  40           * 返回：SUCCESS 返回成功。
  41           *       ERROR    返回失败。
  42           * 说明：
  43           */
  44          ErrorStatus UART1_Init(const UART_InitTypeDef* uartx)
  45          {
  46   1          SM0 = uartx -> Mode >> 1, SM1 = uartx -> Mode;
  47   1          switch(uartx -> BRTGen)
  48   1          {
  49   2              case UART_BRT_TIM1:
  50   2              {
  51   3                  TR1 = 0;        //Turn off timer0
  52   3                  ET1 = 0;        //Ban timer0 interrupt
  53   3                  AUXR &= 0xFE;   //Select timer 1 as baud rate generator
C51 COMPILER V9.60.0.0   STC8AX_UART                                                       06/08/2023 19:12:30 PAGE 2   

  54   3                  TMOD &= 0x0F;       //Timer 1 is fixed to 16 bit auto reload mode
  55   3                  AUXR = (AUXR & 0xBF) | ( !uartx -> BRTMode << 6 );
  56   3                  T1L = (65536UL - CONF_FOSC / (uartx -> BaudRate * 4 * (11 * (!(AUXR & 0x40)) + 1 )));
  57   3                  T1H = (65536UL - CONF_FOSC / (uartx -> BaudRate * 4 * (11 * (!(AUXR & 0x40)) + 1 ))) >> 8;
  58   3                  TR1 = 1;        //Turn on timer0
  59   3                  break;
  60   3              }
  61   2              case UART_BRT_TIM2:
  62   2              {
  63   3                  AUXR &= 0xEF;  //Turn off timer2
  64   3                  IE2 &= 0xFB;   //Ban timer2 interrupt
  65   3                  AUXR |= 0x01;  //Select timer2 as baud rate generator
  66   3                  AUXR = (AUXR & 0xFB) | ( !uartx -> BRTMode << 2 );
  67   3                  T2L = (65536UL - CONF_FOSC / (uartx -> BaudRate * 4 * (11 * (!(AUXR & 0x04)) + 1 )));
  68   3                  T2H = (65536UL - CONF_FOSC / (uartx -> BaudRate * 4 * (11 * (!(AUXR & 0x04)) + 1 ))) >> 8;
  69   3                  AUXR |= 0X10;  //Turn on timer2
  70   3                  break;
  71   3              }
  72   2              default:
  73   2                  return ERROR;
  74   2          }
  75   1          AUXR = (AUXR & 0xDF) | (uartx -> BRTDouble << 5);
  76   1          SCON = (SCON & 0xDF) | (uartx -> MulitComm << 5);
  77   1          SCON = (SCON & 0xEF) | (uartx -> RxEnable << 4);
  78   1          AUXR2 = (AUXR2 & 0xEF) | (uartx -> Relay << 4);
  79   1          UART1_CLEAR_BUSY_FLAG();
  80   1          return SUCCESS;
  81   1      }
  82          
  83          /**
  84           * 功能：串口中断初始化函数。
  85           * 参数：pri 中断优先级。
  86           *       run 使能控制位。
  87           * 返回：SUCCESS 返回成功。
  88           *       ERROR    返回失败。
  89           * 说明：
  90           */
  91          ErrorStatus NVIC_UART1_Init(eNVIC_Pri pri, BOOL run)
  92          {
  93   1          ES = run;
  94   1          NVIC_UART1_PRI(pri);
  95   1          return SUCCESS;
  96   1      }
  97          
  98          /**
  99           * 功能：串口2初始化函数
 100           * 参数：uartx  串口初始化结构体句柄，初始化时请定义该句柄，并将其地址传参。
 101           * 返回：SUCCESS 返回成功。
 102           *       ERROR    返回失败。
 103           * 说明：
 104           */
 105          ErrorStatus UART2_Init(const UART_InitTypeDef* uartx)
 106          {
 107   1          S2CON = (S2CON & 0x3F) | ((uartx -> Mode & 0x02) << 6);
 108   1          if(uartx -> BRTGen == UART_BRT_TIM2)
 109   1          {
 110   2              AUXR &= 0xEF;  //Turn off timer2
 111   2              IE2 &= 0xFB;   //Ban timer2 interrupt
 112   2              AUXR = (AUXR & 0xFB) | ( !uartx -> BRTMode << 2 );
 113   2              T2L = (65536UL - CONF_FOSC / (uartx -> BaudRate * 4 * (11 * (!(AUXR & 0x04)) + 1 )));
 114   2              T2H = (65536UL - CONF_FOSC / (uartx -> BaudRate * 4 * (11 * (!(AUXR & 0x04)) + 1 ))) >> 8;
 115   2              AUXR |= 0X10;  //Turn on timer2
C51 COMPILER V9.60.0.0   STC8AX_UART                                                       06/08/2023 19:12:30 PAGE 3   

 116   2          }
 117   1          else return ERROR;
 118   1          S2CON = (S2CON & 0xDF) | (uartx -> MulitComm << 5);
 119   1          S2CON = (S2CON & 0xEF) | (uartx -> RxEnable << 4);
 120   1          UART2_CLEAR_BUSY_FLAG();
 121   1          return SUCCESS;
 122   1      }
 123          
 124          /**
 125           * 功能：串口中断初始化函数。
 126           * 参数：pri 中断优先级。
 127           *       run 使能控制位。
 128           * 返回：SUCCESS 返回成功。
 129           *       ERROR    返回失败。
 130           * 说明：
 131           */
 132          ErrorStatus NVIC_UART2_Init(eNVIC_Pri pri, BOOL run)
 133          {
 134   1          IE2 = (IE2 & 0xFE) | (run);
 135   1          NVIC_UART2_PRI(pri);
 136   1          return SUCCESS;
 137   1      }
 138          
 139          /**
 140           * 功能：串口3初始化函数
 141           * 参数：uartx  串口初始化结构体句柄，初始化时请定义该句柄，并将其地址传参。
 142           * 返回：SUCCESS 返回成功。
 143           *       ERROR    返回失败。
 144           * 说明：
 145           */
 146          ErrorStatus UART3_Init(const UART_InitTypeDef* uartx)
 147          {
 148   1          S3CON = (S3CON & 0x3F) | ((uartx -> Mode & 0x02) << 6);
 149   1          switch(uartx -> BRTGen)
 150   1          {
 151   2              case UART_BRT_TIM2:
 152   2              {
 153   3                  AUXR &= 0xEF;  //Turn off timer2
 154   3                  IE2 &= 0xFB;   //Ban timer2 interrupt
 155   3                  S3CON &= 0xBF;  //Select timer2 as baud rate generator
 156   3                  AUXR = (AUXR & 0xFB) | ( !uartx -> BRTMode << 2 );
 157   3                  T2L = (65536UL - CONF_FOSC / (uartx -> BaudRate * 4 * (11 * (!(AUXR & 0x04)) + 1 )));
 158   3                  T2H = (65536UL - CONF_FOSC / (uartx -> BaudRate * 4 * (11 * (!(AUXR & 0x04)) + 1 ))) >> 8;
 159   3                  AUXR |= 0X10;  //Turn on timer2
 160   3                  break;
 161   3              }
 162   2              case UART_BRT_TIM3:
 163   2              {
 164   3                  T4T3M &= 0xF7;  //Turn off timer3
 165   3                  IE2 &= 0xDF;  //Ban timer3 interrupt
 166   3                  S3CON |= 0x40;    //Select timer3 as baud rate generator
 167   3                  T4T3M = (T4T3M & 0xFD) | ( !uartx -> BRTMode << 1 );
 168   3                  T3L = (65536UL - CONF_FOSC / (uartx -> BaudRate * 4 * (11 * (!(T4T3M & 0x02)) + 1 )));
 169   3                  T3H = (65536UL - CONF_FOSC / (uartx -> BaudRate * 4 * (11 * (!(T4T3M & 0x02)) + 1 ))) >> 8;
 170   3                  T4T3M |= 0x08; //Turn on timer3
 171   3                  break;
 172   3              }
 173   2              default:
 174   2                  return ERROR;
 175   2          }
 176   1          S3CON = (S3CON & 0xDF) | (uartx -> MulitComm << 5);
 177   1          S3CON = (S3CON & 0xEF) | (uartx -> RxEnable << 4);
C51 COMPILER V9.60.0.0   STC8AX_UART                                                       06/08/2023 19:12:30 PAGE 4   

 178   1          UART3_CLEAR_BUSY_FLAG();
 179   1          return SUCCESS;
 180   1      }
 181          
 182          /**
 183           * 功能：串口中断初始化函数。
 184           * 参数：pri 中断优先级。
 185           *       run 使能控制位。
 186           * 返回：SUCCESS 返回成功。
 187           *       ERROR    返回失败。
 188           * 说明：
 189           */
 190          ErrorStatus NVIC_UART3_Init(BOOL run)
 191          {
 192   1          IE2 = (IE2 & 0xF7) | (run << 3);
 193   1          return SUCCESS;
 194   1      }
 195          
 196          /**
 197           * 功能：串口4初始化函数
 198           * 参数：uartx  串口初始化结构体句柄，初始化时请定义该句柄，并将其地址传参。
 199           * 返回：SUCCESS 返回成功。
 200           *       ERROR    返回失败。
 201           * 说明：
 202           */
 203          ErrorStatus UART4_Init(const UART_InitTypeDef* uartx)
 204          {
 205   1          S4CON = (S4CON & 0x3F) | ((uartx -> Mode & 0x02) << 6);
 206   1          switch(uartx -> BRTGen)
 207   1          {
 208   2              case UART_BRT_TIM2:
 209   2              {
 210   3                  AUXR &= 0xEF;  //Turn off timer2
 211   3                  IE2 &= 0xFB;   //Ban timer2 interrupt
 212   3                  S4CON &= 0xBF;  //Select timer2 as baud rate generator
 213   3                  AUXR = (AUXR & 0xFB) | ( !uartx -> BRTMode << 2 );
 214   3                  T2L = (65536UL - CONF_FOSC / (uartx -> BaudRate * 4 * (11 * (!(AUXR & 0x04)) + 1 )));
 215   3                  T2H = (65536UL - CONF_FOSC / (uartx -> BaudRate * 4 * (11 * (!(AUXR & 0x04)) + 1 ))) >> 8;
 216   3                  AUXR |= 0X10;  //Turn on timer2
 217   3                  break;
 218   3              }
 219   2              case UART_BRT_TIM4:
 220   2              {
 221   3                  T4T3M &= 0x7F;  //Turn off timer3
 222   3                  IE2 &= 0xBF;  //Ban timer4 interrupt
 223   3                  S4CON |= 0x40;   //Select timer3 as baud rate generator
 224   3                  T4T3M = (T4T3M & 0xDF) | ( !uartx -> BRTMode << 5 );
 225   3                  T4L = (65536UL - CONF_FOSC / (uartx -> BaudRate * 4 * (11 * (!(T4T3M & 0x20)) + 1 )));
 226   3                  T4H = (65536UL - CONF_FOSC / (uartx -> BaudRate * 4 * (11 * (!(T4T3M & 0x20)) + 1 ))) >> 8;
 227   3                  T4T3M |= 0x80; //Turn on timer4
 228   3                  break;
 229   3              }
 230   2              default:
 231   2                  return ERROR;
 232   2          }
 233   1          S4CON = (S4CON & 0xDF) | (uartx -> MulitComm << 5);
 234   1          S4CON = (S4CON & 0xEF) | (uartx -> RxEnable << 4);
 235   1          UART4_CLEAR_BUSY_FLAG();
 236   1          return SUCCESS;
 237   1      }
 238          
 239          /**
C51 COMPILER V9.60.0.0   STC8AX_UART                                                       06/08/2023 19:12:30 PAGE 5   

 240           * 功能：串口中断初始化函数。
 241           * 参数：pri 中断优先级。
 242           *       run 使能控制位。
 243           * 返回：SUCCESS 返回成功。
 244           *       ERROR    返回失败。
 245           * 说明：
 246           */
 247          ErrorStatus NVIC_UART4_Init(BOOL run)
 248          {
 249   1          IE2 = (IE2 & 0xEF) | (run << 4);
 250   1          return SUCCESS;
 251   1      }
 252          
 253          
 254          /**
 255           * 功能：串口发送一个字节函数，
 256           * 参数：dat 要发送的字节数据。
 257           * 返回：None.
 258           * 说明：需要开启中断，并在中断服务函数中清除发送标志位。
 259           */
 260          void UARTx_SendByte(eUART_CH uartx , uint8_t dat)
 261          {
 262   1                      /* 串口等待自定义忙标志位 */
 263   1                      while(UartBusyFlg & 0x01<<uartx);
 264   1              
 265   1                /* 串口设置自定义忙标志位 */
 266   1                      UartBusyFlg |= 0x01<<uartx;
 267   1      
 268   1                      if(UART1 == uartx)      SBUF = dat;
 269   1                      if(UART2 == uartx)      S2BUF = dat;
 270   1                      if(UART3 == uartx)      S3BUF = dat;
 271   1                      if(UART4 == uartx)      S4BUF = dat;    
 272   1      }
 273          
 274          /**
 275           * 功能：串口发送字符串函数
 276           * 参数： str 要发送的字符串地址。
 277           * 返回：None.
 278           * 说明：需要开启中断，并在中断服务函数中清除发送标志位。
 279           */
 280          void UARTx_SendString(eUART_CH uartx , const uint8_t *str)
 281          {
 282   1          while(*str != '\0')
 283   1          {
 284   2              UARTx_SendByte(uartx , *(str++));
 285   2          }
 286   1      }
 287          
 288          /**
 289           * 功能：串口发送数组函数
 290           * 参数：arry 要发送的数组地址。
 291           *       len  要发送的数组长度。
 292           * 返回：None.
 293           * 说明：需要开启中断，并在中断服务函数中清除发送标志位。
 294           */
 295          void UARTx_SendArray(eUART_CH uartx , const uint8_t *arry, uint16_t len)
 296          {
 297   1          while(len--)
 298   1          {
 299   2              UARTx_SendByte(uartx , *(arry++));
 300   2          }
 301   1      }
C51 COMPILER V9.60.0.0   STC8AX_UART                                                       06/08/2023 19:12:30 PAGE 6   

 302          
 303          /*>>>>>>>>>> (C) COPYRIGHT NBUFE <<<<<< >>>>>> END OF FILE <<<<<<<<<<*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2316    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
